# coding: utf-8

"""
    REGNIFY HTTP API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: admin@regnify.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from regnify import schemas  # noqa: F401


class UserOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "is_active",
            "profile",
            "id",
            "is_super_admin",
            "user_roles",
            "email",
        }
        
        class properties:
            email = schemas.StrSchema
            id = schemas.UUIDSchema
            is_active = schemas.BoolSchema
            is_super_admin = schemas.BoolSchema
            
            
            class user_roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MiniUserRoleOut']:
                        return MiniUserRoleOut
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MiniUserRoleOut'], typing.List['MiniUserRoleOut']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_roles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MiniUserRoleOut':
                    return super().__getitem__(i)
        
            @staticmethod
            def profile() -> typing.Type['ProfileOut']:
                return ProfileOut
            access_begin = schemas.DateTimeSchema
            access_end = schemas.DateTimeSchema
            last_login = schemas.DateTimeSchema
            __annotations__ = {
                "email": email,
                "id": id,
                "is_active": is_active,
                "is_super_admin": is_super_admin,
                "user_roles": user_roles,
                "profile": profile,
                "access_begin": access_begin,
                "access_end": access_end,
                "last_login": last_login,
            }
    
    is_active: MetaOapg.properties.is_active
    profile: 'ProfileOut'
    id: MetaOapg.properties.id
    is_super_admin: MetaOapg.properties.is_super_admin
    user_roles: MetaOapg.properties.user_roles
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_super_admin"]) -> MetaOapg.properties.is_super_admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_roles"]) -> MetaOapg.properties.user_roles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> 'ProfileOut': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_begin"]) -> MetaOapg.properties.access_begin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_end"]) -> MetaOapg.properties.access_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_login"]) -> MetaOapg.properties.last_login: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "id", "is_active", "is_super_admin", "user_roles", "profile", "access_begin", "access_end", "last_login", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_super_admin"]) -> MetaOapg.properties.is_super_admin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_roles"]) -> MetaOapg.properties.user_roles: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> 'ProfileOut': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_begin"]) -> typing.Union[MetaOapg.properties.access_begin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_end"]) -> typing.Union[MetaOapg.properties.access_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_login"]) -> typing.Union[MetaOapg.properties.last_login, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "id", "is_active", "is_super_admin", "user_roles", "profile", "access_begin", "access_end", "last_login", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
        profile: 'ProfileOut',
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        is_super_admin: typing.Union[MetaOapg.properties.is_super_admin, bool, ],
        user_roles: typing.Union[MetaOapg.properties.user_roles, list, tuple, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        access_begin: typing.Union[MetaOapg.properties.access_begin, str, datetime, schemas.Unset] = schemas.unset,
        access_end: typing.Union[MetaOapg.properties.access_end, str, datetime, schemas.Unset] = schemas.unset,
        last_login: typing.Union[MetaOapg.properties.last_login, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserOut':
        return super().__new__(
            cls,
            *_args,
            is_active=is_active,
            profile=profile,
            id=id,
            is_super_admin=is_super_admin,
            user_roles=user_roles,
            email=email,
            access_begin=access_begin,
            access_end=access_end,
            last_login=last_login,
            _configuration=_configuration,
            **kwargs,
        )

from regnify.model.mini_user_role_out import MiniUserRoleOut
from regnify.model.profile_out import ProfileOut
